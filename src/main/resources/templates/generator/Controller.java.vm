package com.mryx.grampus.pop.admin.controller.kitchen;

import com.alibaba.fastjson.JSONObject;
import com.missfresh.sdk.ucloud.UcloudConfig;
import com.missfresh.sdk.util.FileUtil;
import com.missfresh.sdk.util.StringUtil;
import com.mryx.grampus.pop.admin.annotation.UserLog;
import com.mryx.grampus.pop.admin.util.UploadFileToUcloudUtil;
import com.mryx.grampus.pop.api.bean.common.SystemResponse;
import com.mryx.grampus.pop.api.request.kitchen.CreateOrModify${className}Request;
import com.mryx.grampus.pop.api.request.kitchen.Delete${className}Request;
import com.mryx.grampus.pop.api.request.kitchen.Fetch${className}ListRequest;
import com.mryx.grampus.pop.api.request.kitchen.Fetch${className}Request;
import com.mryx.grampus.pop.api.rpc.service.kitchen.IPop${className}RpcService;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;

/**
 * 中央厨房表MerchantsController.java
 *
 * @author daisy
 * @email
 * @date 2018-06-06 10:50:51
 */

@Controller
@RequestMapping("/api/pop/${className}")
public class ${className}Controller {
    @Resource
    private IPop${className}RpcService ${className}RpcService;

    @UserLog
    @RequestMapping("/to.do")
    public String ${className}() {
        return "pages/pop/${className}/list${className}";
    }

    @UserLog
    @ResponseBody
    @RequestMapping("/list.do")
    public SystemResponse fetch${className}List(Fetch${className}ListRequest fetch${className}ListRequest) {
        //查询列表数据
        return center${className}RpcService.fetch${className}ListPage(fetch${className}ListRequest);
    }

    @UserLog
    @RequestMapping("/add.do")
    public String add() {
        return "pages/pop/${className}/modify${className}";
    }

    @UserLog
    @RequestMapping("/modify")
    public String edit(Fetch${className}Request fetch${className}Request, Model model) {
        SystemResponse systemResponse = ${className}RpcService.fetch${className}(fetch${className}Request);
        model.addAttribute("${className}Info", systemResponse.getResponseData());
        return "pages/pop/${className}/modify${className}";
    }

    /**
     * 保存
     */
    @UserLog
    @ResponseBody
    @RequestMapping("/save.do")
    public ModelAndView save(CreateOrModify${className}Request createOrModify${className}Request, @RequestParam(value = "pictUrlImg", required = false) CommonsMultipartFile pictUrlImg) {
        String imgUrl = extraImgUrl(pictUrlImg);
        if (StringUtil.isNotBlank(imgUrl)) {
            createOrModify${className}Request.setLogo(imgUrl);
        }
        SystemResponse systemResponse = ${className}RpcService.createOrUpdate${className}(createOrModify${className}Request);
        ModelAndView view = buildModelAndView(systemResponse, "创建成功");
        return view;
    }

    /**
     * 修改
     */
    @UserLog
    @ResponseBody
    @RequestMapping("/update.do")
    public ModelAndView update(CreateOrModify${className}Request createOrModify${className}Request, @RequestParam(value = "pictUrlImg", required = false) CommonsMultipartFile pictUrlImg) {
        String imgUrl = extraImgUrl(pictUrlImg);
        if (StringUtil.isNotBlank(imgUrl)) {
            createOrModify${className}Request.setLogo(imgUrl);
        }
        SystemResponse systemResponse = ${className}RpcService.createOrUpdate${className}(createOrModify${className}Request);
        ModelAndView view = buildModelAndView(systemResponse, "修改成功");
        return view;
    }

    private ModelAndView buildModelAndView(SystemResponse systemResponse, String message) {
        ModelAndView view = new ModelAndView("base/json");
        JSONObject json = new JSONObject();
        if (systemResponse.isSuccessful()) {
            json.put("operationResult", "success");
            json.put("successMsg", message);
        } else {
            json.put("operationResult", "fail");
        }
        view.addObject("json", json.toJSONString());
        return view;
    }

    /**
     * 上传图片
     *
     * @param pictUrlImg
     * @return
     */
    private String extraImgUrl(CommonsMultipartFile pictUrlImg) {
        String imgUrl = null;
        String fileExtension = FileUtil.getExtension(pictUrlImg.getOriginalFilename());
        if (StringUtils.isNotBlank(fileExtension)) {
            imgUrl = UploadFileToUcloudUtil.uploadFile(UcloudConfig.BUCKET_DEVELOP, pictUrlImg, "grampus-pop-img", fileExtension);
        }
        return imgUrl;
    }

    /**
     * 删除
     */
    @UserLog
    @RequestMapping("/remove.do")
    @ResponseBody
    public SystemResponse remove(Delete${className}Request delete${className}Request) {
        SystemResponse systemResponse = ${className}RpcService.delete${className}(delete${className}Request);
        return systemResponse;
    }
}
